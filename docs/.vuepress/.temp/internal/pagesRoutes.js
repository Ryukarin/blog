import { Vuepress } from '@vuepress/client/lib/components/Vuepress'

const routeItems = [
  ["v-184f4da6","/intro.html",{"title":"个人信息","icon":"info","type":"article","readingTime":{"minutes":0.28,"words":84},"excerpt":"个人信息页 基本信息 姓名：刘家麟; 生日：yyyy/mm/dd; 年龄：xx; 性别：男; 现居地：江苏; 娱乐爱好 看书（主要是小说）; 看电影（小电影除外）; 运动（主要为了减肥）; 动手瞎折腾（有空无聊时）; 梦想 梦想还是要有的，万一彩票中奖了呢。"},["/intro","/intro.md"]],
  ["v-590a42d9","/project.html",{"title":"项目总览","icon":"folder","type":"home","readingTime":{"minutes":0,"words":0},"excerpt":""},["/project","/project.md"]],
  ["v-8daa1a0e","/",{"title":"博客主页","icon":"home","type":"home","readingTime":{"minutes":0,"words":0},"excerpt":""},["/index.html","/readme.md"]],
  ["v-56eec8a2","/IT/FTP.html",{"title":"FTP笔记","type":"article","readingTime":{"minutes":6.28,"words":1884},"excerpt":"FTP 介绍 FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。FTP 协议包括两个组成部分，其一为 FTP 服务器，其二为 FTP 客户端。其中 FTP 服务器用来存储文件，用户可以使用 FTP 客户端通过 FTP 协议访问位于 FTP 服务器上的资源。在开发网站的时候，通常利用 FTP 协议把网页","date":"2021-06-24T00:00:00.000Z","category":["IT基础"],"tag":["IT基础知识"]},["/IT/FTP","/IT/FTP.md"]],
  ["v-2d0a1acb","/IT/",{"title":"IT 基础","type":"article","readingTime":{"minutes":0.33,"words":99},"excerpt":"IT 基础知识 就是平时遇到的最基本的知识，网罗到此处。包括各个方面： Linux; Windows; 各种系统; 网络; 各种协议; 等等......; 都是之前学习或临时用到的时候，记的一些学习笔记。长时间没怎么用，再想用就已经忘的差不多了。所以，整理起来，以便日后方便查阅。","date":"2021-06-24T00:00:00.000Z","category":["IT基础"],"tag":["IT基础知识"]},["/IT/index.html","/IT/README.md"]],
  ["v-6a7a7fbf","/IT/SFTP.html",{"title":"SFTP笔记","type":"article","readingTime":{"minutes":3.88,"words":1163},"excerpt":"SFTP 介绍 SFTP 是 SSH File Transfer Protocol 的缩写，安全文件传送协议。SFTP 与 FTP 有着几乎一样的语法和功能。SFTP 为 SSH 的其中一部分，是一种传输档案至 Blogger 伺服器的安全方式。 其实在 SSH 软件包中，已经包含了一个叫作 SFTP 的安全文件信息传输子系统，SFTP 本身没有单独的守护进","date":"2021-06-24T00:00:00.000Z","category":["IT基础"],"tag":["IT基础知识"]},["/IT/SFTP","/IT/SFTP.md"]],
  ["v-4f46e412","/IT/git.html",{"title":"Git笔记","type":"article","readingTime":{"minutes":26.2,"words":7860},"excerpt":"Git 笔记 Git 是什么 Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 Git 与常用的版本控制工具 CVS，Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。 Git 不仅仅是","date":"2021-06-24T00:00:00.000Z","category":["IT基础"],"tag":["Git"]},["/IT/git","/IT/git.md"]],
  ["v-63a00d66","/operate/AC_RM2100.html",{"title":"【RM2100】刷机救转","type":"article","readingTime":{"minutes":7.2,"words":2160},"excerpt":"红米的 RM2100（或者小米 AC2100）最近挺火的，因为价钱便宜，配置给力，信号不错，主要是可以刷机。 咸鱼上斐讯 K2P 已经炒上天了，虽然信号各方面没得说，但是价钱嘛。还是小米的这两款给力，官方价格，来个优惠券，真香。反观斐讯 K2P 只有二手的，还有可能翻车。于是在官网下手了红米的 RM2100。 收到货之后，稍微用了一会，主要测试原固件。其实还","date":"2020-06-30T00:00:00.000Z","category":["刷机"],"tag":["路由器"]},["/operate/AC_RM2100","/operate/AC_RM2100.md"]],
  ["v-68b3ddd0","/operate/MSG1500.html",{"title":"【MSG1500】刷机","type":"article","readingTime":{"minutes":3.82,"words":1147},"excerpt":"前几天在闲鱼上看到一款路由器瑞斯康达 SGM1500，网上查了一下相关配置，还不错，还可以刷机，于是搞了一台。 配置参数 CPU：MT7621; 接口：1WAN+4LAN，USB2.0（全千兆网口）; 无线：2.4G/5G（7615DN）; Flash：128M（NAND）; 内存：256M; 刷入 Breed 确定Breed CPU 和无线芯片是和 K2P","date":"2020-11-06T00:00:00.000Z","category":["折腾"],"tag":["MSG1500"]},["/operate/MSG1500","/operate/MSG1500.md"]],
  ["v-109e7f41","/operate/N1_armbian.html",{"title":"【斐讯N1】Armbian","type":"article","readingTime":{"minutes":1.62,"words":486},"excerpt":"下载 Armbian 镜像 下载地址：https://users.armbian.com/balbes150/arm-64/ 该地址为 armbian 官网 balbes150 大神专门为晶晨、全志、RK 芯片的盒子做的镜像，并且不断更新，更新后，原来的镜像都会被删除，所以如果觉得某个版本的镜像好，要自己备份。 写入镜像到 U盘 1. 下载镜像写入工具，把镜","date":"2021-03-18T00:00:00.000Z","category":["折腾"],"tag":["斐讯N1"]},["/operate/N1_armbian","/operate/N1_armbian.md"]],
  ["v-1016622a","/operate/N1_logo_PARTITION.html",{"title":"【斐讯N1】开机第一屏logo替换","type":"article","readingTime":{"minutes":1.82,"words":546},"excerpt":"斐讯 N1 的刷机，网上的教程满天飞，随便找一个都可以。但是，刷完机之后，开启启动的第一屏 logo 我个人不是太喜欢。于是，就有了想替换的想法，在网上查询了半天，有两种方法：一个是用 Amlogic CustomizationTool 工具修改替换刷机包的 logo，这个需要重新刷机；另一个是直接命令行替换，无需刷机。 方法一 1. 首先到网上搜索 Aml","date":"2021-03-18T00:00:00.000Z","category":["折腾"],"tag":["斐讯N1"]},["/operate/N1_logo_PARTITION","/operate/N1_logo_PARTITION.md"]],
  ["v-2516109e","/operate/Q5.html",{"title":"【魔百合Q5】改造计划","type":"article","readingTime":{"minutes":1.55,"words":464},"excerpt":"这次直接说说改造过程，首先是拆机测量，设计并画出图纸（比较浪费时间,各种修改），之后去马云家找个亚克力厂家定制外壳，直接把图纸发给客服，估价下单，一般也就十几块钱的样子。还有要买一些组装外壳需要的小零件，铜柱螺丝之类的。 魔百合 Q5（也叫数码视讯 Q5）在复古游戏圈曾是一代神器，刷上复古游戏系统（Sx05RE），可以模拟几千个游戏。当然也可以刷 armbi","date":"2020-04-29T00:00:00.000Z","category":["Q5"],"tag":["折腾"]},["/operate/Q5","/operate/Q5.md"]],
  ["v-8e59ddb8","/operate/",{"title":"瞎折腾","type":"article","readingTime":{"minutes":0.52,"words":155},"excerpt":"瞎折腾那些事儿 你又在瞎搞什么东西啊。 就是把平时学到的一些技能，搞搞小玩意儿。基于一些矿渣产品上的，刷机、改造、测试、搭建服务器之类的折腾总结；也有一些其他方面的折腾，突然哪天对什么感兴趣了，那就安排！ 矿渣硬件方面的折腾： 玩客云; 斐逊N1; 斐逊K3; 小娱C1; 魔百合Q5; X86小主机; 瑞斯康达SGM1500; 红米AC2100; 贝克云; ","date":"2021-04-09T00:00:00.000Z","category":["折腾"],"tag":["矿渣"]},["/operate/index.html","/operate/README.md"]],
  ["v-4770b31f","/operate/XY_C1C5.html",{"title":"【小娱C1C5】改造计划","type":"article","readingTime":{"minutes":2.41,"words":722},"excerpt":"配置 CPU：MT7621A; 内存：512MB DDR3; Flash：32MB; WAN\\*1 + LAN\\*4（均为千兆）; USB 3.0*1; SATA\\*1（支持 SATA3）; DC：12V、1-2A; 没有无线; 材料准备 图纸来自于矿渣社区，有好几个版本，看上去有点乱，于是参考图纸重新画了，如下图所示。 以上物品，自行购买 淘宝定制亚克力：","date":"2020-04-27T00:00:00.000Z","category":["小娱"],"tag":["折腾"]},["/operate/XY_C1C5","/operate/XY_C1C5.md"]],
  ["v-b11b50c6","/operate/XY_C1C5_sj.html",{"title":"【小娱C1C5】刷机","type":"article","readingTime":{"minutes":1.75,"words":525},"excerpt":"外观配置 外观图片 配置参数 CPU：MT7621A; 网口：LAN \\* 4 + WAN \\* 1（全千兆）; USB 3.0 \\* 1; 内置一个 SATA 接口（支持 SATA3）; 电源 12V1A; 内存：512MB; Flash：32MB; 刷机过程 刷入 breed 首先给小娱通电，网线连接小娱 LAN口 和电脑网口，确认电脑网络已经正常连接到","date":"2020-04-27T00:00:00.000Z","category":["小娱"],"tag":["折腾"]},["/operate/XY_C1C5_sj","/operate/XY_C1C5_sj.md"]],
  ["v-0fb3a005","/operate/bky_P1.html",{"title":"【贝壳云】改造计划","type":"article","readingTime":{"minutes":2.52,"words":757},"excerpt":"前段时间在网上看到了关于矿渣贝壳云的玩法，灯大的小钢炮固件以及亚克力外壳改造，心动了，手痒了。于是准备对它下手了。 配置 贝壳云是一款矿难机，配置如下： RK3328 四核 A53 1.5Ghz; 1G DDR3; 8G emmc; USB3.0 x 4; 千兆有线网口; HDMI 高清接口; 刷机 关于刷机，我就不多说了，网上好多教程 刷机教程 各种固件 ","date":"2020-03-18T00:00:00.000Z","category":["矿渣"],"tag":["折腾"]},["/operate/bky_P1","/operate/bky_P1.md"]],
  ["v-35162aa2","/operate/flippy_openWRT.html",{"title":"【openwrt】编译F大N1固件","type":"article","readingTime":{"minutes":2.32,"words":697},"excerpt":"所需文件 Flippy预编译好的 Arm64 内核（3个文件 boot、dtb、modules）; 下载地址： 提取码：hk6x 自己编译的 openwrt rootfs tar.gz 包; openwrt-armvirt-64-default-rootfs.tar.gz; 准备环境 linux 环境（这里以 Ubuntu 20.04 为工作环境）; 预先安","date":"2020-06-30T00:00:00.000Z","category":["Openwrt"],"tag":["N1"]},["/operate/flippy_openWRT","/operate/flippy_openWRT.md"]],
  ["v-66d9f2ac","/operate/mkbootimg.html",{"title":"【bootimg】解包打包","type":"article","readingTime":{"minutes":6.13,"words":1839},"excerpt":"关于 kernel.img 系统内核文件，我们该如何去修改呢？一般此类型文件是很难打开或挂载的，那么就没有办法修改了吗，经过几天的查资料，其实也不难。对安卓开发的大神来说，那是轻而易举的，但对于没有开发经验的来说就比较困难了。 好了，下面直接把我折腾的内容整理一下。 解压 kernel.img 文件 查看文件类型 要想解压某个文件，首先要知道该文件是什么类型","date":"2021-09-15T00:00:00.000Z","category":["系统文件"],"tag":["解包"]},["/operate/mkbootimg","/operate/mkbootimg.md"]],
  ["v-f8fb4224","/operate/openwrt.html",{"title":"【OpenWRT】固件编译","type":"article","readingTime":{"minutes":6.18,"words":1853},"excerpt":"此文主要是以 Lean 的 Openwrt 源码编译： 固件说明 默认登陆 IP：192.168.1.1; 用户名/密码：root/password; 插件可自行增加或删减; 说明 不要用 root 用户进行 git 和编译！！！; 国内用户编译前最好准备好梯子; 环境准备 1、Linux 系统 推荐 Ubuntu 18.04 LTS x64，当然其它也可以","date":"2021-04-09T00:00:00.000Z","category":["折腾"],"tag":["openwrt"]},["/operate/openwrt","/operate/openwrt.md"]],
  ["v-60a246e8","/operate/padavan.html",{"title":"【Padavan】固件编译","type":"article","readingTime":{"minutes":6.69,"words":2008},"excerpt":"固件说明 默认登陆IP：192.168.2.1; 默认用户名/密码：admin/admin; 默认wifi密码：1234567890; 集成/取消新增插件请修改此文件：trunk/buildfirmwaremodify; 已适配除官方适配外的以下机型; MI-R3P(感谢群里emmmm适配,可能led控制有点问题,其它功能正常); 京东云路由(文件来自Lin","date":"2021-04-09T00:00:00.000Z","category":["折腾"],"tag":["padavan"]},["/operate/padavan","/operate/padavan.md"]],
  ["v-79aab12e","/operate/squashfs.html",{"title":"【squashfs】解包打包","type":"article","readingTime":{"minutes":5.19,"words":1557},"excerpt":"查看文件类型 使用 file 命令查看文件的文件类型，以便使用对应的命令工具去执行操作。 安装工具 根据上面查看到的 SYSTEM 文件类型是 Squashfs filesystem，那么需要用到 squashfs-tools 工具命令，直接安装。 unsquashfs 命令解压解包 解包打包最好切换到 root 用户操作。用 unsquashfs 命令解压","date":"2021-09-15T00:00:00.000Z","category":["系统文件"],"tag":["解包"]},["/operate/squashfs","/operate/squashfs.md"]],
  ["v-32b3b759","/operate/vuepress_blog.html",{"title":"【VuePress】博客搭建","type":"article","readingTime":{"minutes":7.34,"words":2202},"excerpt":"环境配置 你需要安装最新的 Node.js 和 Yarn。 在安装过程中，保持所有的默认设置，一路下一步即可。 安装 node.js 源码安装; 验证安装结果; 或者 安装 yarn 或者 vuepress 搭建 创建模板 创建过程中，需要填写一些信息，等到下载搭建完成 文件结构 配置文件 一个 VuePress 网站必要的配置文件是 .vuepress/c","date":"2021-05-09T00:00:00.000Z","category":["Vuepress"],"tag":["blog"]},["/operate/vuepress_blog","/operate/vuepress_blog.md"]],
  ["v-58190060","/project/link.html",{"title":"常用网站","icon":"splugin","type":"article","readingTime":{"minutes":0.61,"words":182},"excerpt":"常用网站 工具网站说明 :-----:--- 工具资料箱在线工具，你能找到的，基本都在 稿定免费在线PS网站 docsmall在线压缩工具，图片压缩、gif压缩、PDF压缩、PDF合并、PDF分割 PDF派几十个强大的PDF在线工具，永久免费，没有注册入口，人人都是VIP！ 小码短链接简单易用的渠道短链接统计工具 云短信临时手机号，在线云短信网页版 - 免费","date":"2021-04-21T00:00:00.000Z","category":["网站"],"tag":["link"]},["/project/link","/project/link.md"]],
  ["v-fec84bc4","/project/markdown_guide.html",{"title":"Markdown语法","type":"article","readingTime":{"minutes":6.34,"words":1903},"excerpt":"Markdown 介绍 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 Markdown 编写的文档后缀为 .md, .markdown。 Markdown 应用 Markdown 能被使用来撰写电子书，如：Gitbook。 当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHu","date":"2021-04-01T00:00:00.000Z","category":["学习"],"tag":["Markdown"]},["/project/markdown_guide","/project/markdown_guide.md"]],
  ["v-2f0769a8","/project/Docker/01.docker.html",{"title":"初识 Docker 与容器","type":"article","readingTime":{"minutes":12.51,"words":3752},"excerpt":"什么是 Docker 1、Docker 开源项目背景 Docker 是基于 Go 语言实现的开源容器项目。它诞生于 2013 年年初，最初发起者是 dotCloud 公司。Docker 自开源后受到业界广泛的关注和参与，目前已有 80 多个相关开源组件项目（包括 Containerd、Moby、Swarm 等），逐渐形成了围绕 Docker 容器的完整的生态","date":"2021-08-23T00:00:00.000Z","category":["笔记"],"tag":["docker"]},["/project/Docker/01.docker","/project/Docker/01.docker.md"]],
  ["v-52015ca6","/project/Docker/02.docker.html",{"title":"核心概念与安装配置","type":"article","readingTime":{"minutes":11.02,"words":3305},"excerpt":"首先介绍 Docker 的三大核心概念： 镜像（Image）; 口容器（Container）; 口仓库（Reposit）; 只有理解了这三个核心概念，才能顺利地理解 Docker 容器的整个生命周期 。 随后，将介绍如何在常见的操作系统平台上安装 Docker ，包括 Ubuntu、CentOS 、 MacOS 和 Windows 等主流操作系统 。 核心概","date":"2021-08-23T00:00:00.000Z","category":["笔记"],"tag":["docker"]},["/project/Docker/02.docker","/project/Docker/02.docker.md"]],
  ["v-74fb4fa4","/project/Docker/03.docker.html",{"title":"使用 Docker 镜像","type":"article","readingTime":{"minutes":18.81,"words":5642},"excerpt":"镜像是 Docker 三大核心概念中最重要的，自 Docker 诞生之日起镜像就是相关社区最为热门的关键词。 Docker 运行容器前需要本地存在对应的镜像，如果镜像不存在，Docker 会尝试先从默认镜像仓库下载（默认使用 Docker Hub 公共注册服务器中的仓库），用户也可以通过配置，使用自定义的镜像仓库。 本章将围绕镜像这一核心概念介绍具体操作，包","date":"2021-08-23T00:00:00.000Z","category":["笔记"],"tag":["docker"]},["/project/Docker/03.docker","/project/Docker/03.docker.md"]],
  ["v-97f542a2","/project/Docker/04.docker.html",{"title":"操作 Docker 容器","type":"article","readingTime":{"minutes":21.7,"words":6510},"excerpt":"容器是 Docker 的另 一个核心概念。简单来说，容器是镜像的一个运行实例。所不同的是，镜像是静态的只读文件，而容器带有运行时需要的可写文件层，同时，容器中的应用进程处于运行状态。 如果认为虚拟机是模拟运行的一整套操作系统（包括内核、应用运行态环境和其他系统环境）和跑在上面的应用。那么 Docker 容器就是独立运行的一个（或一组）应用，以及它们必需的运行","date":"2021-08-23T00:00:00.000Z","category":["笔记"],"tag":["docker"]},["/project/Docker/04.docker","/project/Docker/04.docker.md"]],
  ["v-baef35a0","/project/Docker/05.docker.html",{"title":"访问 Docker 仓库","type":"article","readingTime":{"minutes":7.72,"words":2317},"excerpt":"仓库（Repository）是集中存放镜像的地方，又分公共仓库和私有仓库。 有时候容易把仓库与注册服务器（Registry）混淆。实际上注册服务器是存放仓库的具体服务器，一个注册服务器上可以有多个仓库，而每个仓库下面可以有多个镜像。从这方面来说，仓库可以被认为是一个具体的项目或目录。例如对于仓库地址 private-docker.com/ubuntu 来说，","date":"2021-08-23T00:00:00.000Z","category":["笔记"],"tag":["docker"]},["/project/Docker/05.docker","/project/Docker/05.docker.md"]],
  ["v-dde9289e","/project/Docker/06.docker.html",{"title":"Docker 数据管理","type":"article","readingTime":{"minutes":2.36,"words":707},"excerpt":"在生产环境中使用 Docker，往往需要对数据进行持久化，或者需要在多个容器之间进行数据共享，这必然涉及容器的数据管理操作。 容器中的管理数据主要有两种方式： 数据卷（Data Volumes）：容器内数据直接映射到本地主机环境；; 数据卷容器（Data Volume Containers）：使用特定容器维护数据卷。; 将首先介绍如何在容器内创建数据卷，并且","date":"2021-08-23T00:00:00.000Z","category":["笔记"],"tag":["docker"]},["/project/Docker/06.docker","/project/Docker/06.docker.md"]],
  ["v-7f8e7232","/project/Docker/07.docker.html",{"title":"端口映射与容器互联","type":"article","readingTime":{"minutes":8.83,"words":2648},"excerpt":"通过前面的学习，相信你已经掌握了单个容器的管理操作。在实践中，经常会碰到需要多个服务组件容器共同协作的情况，这往往需要多个容器之间能够互相访问到对方的服务。 Docker 除了通过网络访间外，还提供了两个很方便的功能来满足服务访问的基本需求：一个是允许映射容器内应用的服务端口到本地宿主主机；另一个是互联机制实现多个容器间通过容器名来快速访问。下面将分别讲解这","date":"2021-08-23T00:00:00.000Z","category":["笔记"],"tag":["docker"]},["/project/Docker/07.docker","/project/Docker/07.docker.md"]],
  ["v-6e1178b3","/project/Docker/08.docker.html",{"title":"使用 Dockerfile 创建镜像","type":"article","readingTime":{"minutes":2.65,"words":795},"excerpt":"Dockerfile 是一个文本格式的配置文件，用户可以使用 Dockerfile 来快速创建自定义的镜像。 下面首先将介绍 Dockerfile 典型的基本结构及其支持的众多指令，并具体讲解通过这些指令来编写定制镜像的 Dockerfile，以及如何生成镜像。最后，会介绍使用 Dockerfile 的一些最佳实践经验。 基本结构 Dockerfile 由一","date":"2021-08-23T00:00:00.000Z","category":["笔记"],"tag":["docker"]},["/project/Docker/08.docker","/project/Docker/08.docker.md"]],
  ["v-c0f42e40","/project/Docker/",{"title":"虚拟化的发展","type":"article","readingTime":{"minutes":2.79,"words":837},"excerpt":"虚拟化 如果说主机时代比拼的是单个服务器物理性能（如 CPU 主频和内存）的强弱，那么在云时代，最为看重的则是凭借虚拟化技术所构建的集群处理能力 。 伴随着信息技术的飞速发展，虚拟化的概念早已经广泛应用到各种关键场景中 。 从 20 世纪 60 年代 IBM 推出的大型主机虚拟化，到后来以 Xen 、KVM 为代表的虚拟机虚拟化，再到现在以 Docker 为","date":"2021-08-23T00:00:00.000Z","category":["笔记"],"tag":["docker"]},["/project/Docker/index.html","/project/Docker/README.md"]],
  ["v-1f5476b9","/project/Excel/01.Excel_hotkey.html",{"title":"Excel 快捷键","type":"article","readingTime":{"minutes":0.42,"words":126},"excerpt":"只会用Ctrl+C和Ctrl+V怎么面对职场挑战！ 当然 这些快捷键不需要全部记住，咱们只要收藏一下，记住几个常用的快捷键就可以了，对于提高效率和逼格，作用都是不错的。 ::: tip 注 以上图片来自于 ExcelHome","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/01.Excel_hotkey","/project/Excel/01.Excel_hotkey.md"]],
  ["v-fe27f2d8","/project/Excel/02.Excel_function.html",{"title":"Excel 函数","type":"article","readingTime":{"minutes":11.98,"words":3593},"excerpt":"Excel 的常用函数大致可分为以下几大类： 统计函数; 逻辑函数; 文本函数; 数学函数; 查找引用函数; 日期时间函数; 信息函数; ......; 当然，工作中很多问题不是单单一个函数就可以解决的，而是多个函数的组合才能沟解决问题的，这就要我们灵活的运用函数套嵌，或者需要辅助列等等。同一个问题也不是只有一个方法，可以有多种方法，具体情况具体对待。 统计","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/02.Excel_function","/project/Excel/02.Excel_function.md"]],
  ["v-413fd00a","/project/Excel/03.VBA_Range.html",{"title":"VBA 之 Range 对象","type":"article","readingTime":{"minutes":55.2,"words":16559},"excerpt":"Range 对象是 Excel 应用程序中最常用的对象，一个 Range 对象代表一个单元格、一行、一列、包含一个或者更多单元格区域（可以是连续的单元格，也可以是不连续的单元格）中选定的单元格，甚至是多个工作表上的一组单元格，在操作 Excel 内的任何区域之前都需要将其表示为一个 Range 对象，然后使用该 Range 对象的方法和属性。 1、单元格的引","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/03.VBA_Range","/project/Excel/03.VBA_Range.md"]],
  ["v-2ddbcf07","/project/Excel/04.VBA_Sheet.html",{"title":"VBA 之 Sheet 对象","type":"article","readingTime":{"minutes":32.91,"words":9873},"excerpt":"21、引用工作表的方式 VBA 中，在不同的工作表之间转换或者对不同工作表中的单元格区域进行操作时，需要指定引用的工作表，通常有下面几种方法： 1）使用工作表的名称 工作表名称是指显示在工作表标签中的文本，工作表名称可以使用 WorkSheets 集合和 Sheets 集合两种引用方式，如下面的代码所示。 第 2、3 行代码都激活工作簿中名称为“sheet1","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/04.VBA_Sheet","/project/Excel/04.VBA_Sheet.md"]],
  ["v-0fc50bda","/project/Excel/05.VBA_Workbook.html",{"title":"VBA 之 Workbook 对象","type":"article","readingTime":{"minutes":32.07,"words":9622},"excerpt":"40、工作簿的引用方法 VBA 中，在不同的工作簿之间转换需要指定引用的工作簿，通常有下面几种方法。 1）使用工作簿的名称 工作簿名称是指 Excel 文件的文件名，可以使用 Workbooks 集合引用方式来引用工作簿，如下面的代码所示。 代码解析： WbPath 过程显示工作簿“工作簿的引用方法”的路径。应用于 Workbook 对象的 Path 属性将","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/05.VBA_Workbook","/project/Excel/05.VBA_Workbook.md"]],
  ["v-71136ee4","/project/Excel/06.VBA_Shape_Chart.html",{"title":"VBA 之 Shape、Chart 对象","type":"article","readingTime":{"minutes":28.09,"words":8428},"excerpt":"53、在工作表中添加图形 如果需要在工作表中添加图形对象，可以使用 AddShape 方法，如下面的代码所示。 代码解析： AddShape 过程在工作表中添加一个矩形并设置其外观等属性。 第 2 行代码声明变量 myShape 的对象类型。 第 3、4 行代码删除可能存在的名称为“myShape”的图形对象。 第 5 行代码使用 AddShape 方法在工","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/06.VBA_Shape_Chart","/project/Excel/06.VBA_Shape_Chart.md"]],
  ["v-08690fd3","/project/Excel/07.VBA_Application.html",{"title":"VBA 之 Application 对象","type":"article","readingTime":{"minutes":11.3,"words":3390},"excerpt":"64、取得 Excel 版本信息 Application 对象的 Version 属性可以返回 Excel 的版本号，如下面的代码所示。 代码解析： AppVersion 过程返回 Application 对象的 Version 属性值来取得 Excel 版本号。 应用于 Application 对象的 Version 属性返回 Excel 版本号，语法如下","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/07.VBA_Application","/project/Excel/07.VBA_Application.md"]],
  ["v-f93883b0","/project/Excel/08.VBA_dialog.html",{"title":"VBA 之 使用对话框","type":"article","readingTime":{"minutes":27.84,"words":8351},"excerpt":"73、使用 Msgbox 函数 1）显示简单的提示信息 在使用Excel的过程中，如果需要向用户显示简单的提示信息，可以使用MsgBox函数显示一个消息框，如下面的代码所示。 代码解析： Mymsgbox 过程使用 MsgBox 函数显示一个消息框。MsgBox 函数用于显示提示信息，语法如下： 运行 Mymsgbox 过程，显示如图 73-1 所示的消息框","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/08.VBA_dialog","/project/Excel/08.VBA_dialog.md"]],
  ["v-6b41aa94","/project/Excel/09.VBA_menu_toolbar.html",{"title":"VBA 之 菜单和工具栏","type":"article","readingTime":{"minutes":32.39,"words":9718},"excerpt":"79、在菜单中添加菜单项 在 Excel 工作表的菜单中可以添加新的菜单项和子菜单，如下面的代码所示。 代码解析： myTools 过程使用 Add 方法在 Excel 工作表菜单栏中的“帮助”菜单中添加一个标题为“Excel Home 技术论坛”的菜单项和 5 个子菜单。 第 2 行到第 5 行代码声明变量类型。 第 6、7 行代码使用 Array 函数创","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/09.VBA_menu_toolbar","/project/Excel/09.VBA_menu_toolbar.md"]],
  ["v-afcfa9a8","/project/Excel/10.VBA_controls_form_1.html",{"title":"VBA 之 控件与用户窗体1","type":"article","readingTime":{"minutes":47.98,"words":14395},"excerpt":"98、限制文本框的输入 用户在使用文本框输入数据时，往往希望能限制输入数据的类型，比如只能输入数字。但是没有内置的属性能限制在文本框中只能输入数字，只能在文本框的事件过程中使用代码来测试输入的是哪类字符，然后只允许输入数字字符和一个“-”号、一个“.”号，如下面的代码所示。 代码解析： 文本框的 KeyPress 事件过程，测试键盘输入的是哪类字符，只允许输","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/10.VBA_controls_form_1","/project/Excel/10.VBA_controls_form_1.md"]],
  ["v-a8b3522c","/project/Excel/11.VBA_controls_form_2.html",{"title":"VBA 之 控件与用户窗体2","type":"article","readingTime":{"minutes":56.41,"words":16922},"excerpt":"116、使用 DTP 控件输入日期 在工作表中输入日期可以使用日期时间控件（Microsoft Date and Time Picker Control 6.0，简称 DTP 控件）。 在工作表中单击菜单“视图”→“工具栏”→“控件工具箱”，选择“其他控件”中的 DTP 控件如图 116-1 所示，在工作表中添加一个 DTP 控件。 图 116-1\t选择 D","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/11.VBA_controls_form_2","/project/Excel/11.VBA_controls_form_2.md"]],
  ["v-a196fab0","/project/Excel/12.VBA_controls_form_3.html",{"title":"VBA 之 控件与用户窗体3","type":"article","readingTime":{"minutes":43.34,"words":13002},"excerpt":"134、使用 TreeView 控件显示层次 TreeView 控件是一个树形结构的控件，该控件用于显示分层数据，如目录或文件目录，使程序的表现更为灵活，用户的操作更加方便，示例代码如下： 代码解析： 在窗体初始化时将工作表中的科目名称填充 TreeView 控件。 第 7 行代码，设置 TreeView 控件每个列表的组成方式。Style 属性设置值如表格","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/12.VBA_controls_form_3","/project/Excel/12.VBA_controls_form_3.md"]],
  ["v-790ac572","/project/Excel/13.VBA_function.html",{"title":"VBA 之 函数的使用","type":"article","readingTime":{"minutes":34.65,"words":10394},"excerpt":"153、调用工作表函数求和 在对工作表的单元格区域进行求和计算时，使用工作表 Sum 函数比使用 VBA 代码遍历单元格进行累加求和效率要高得多，代码如下所示。 代码解析： rngSum 过程调用工作表 Sum 函数对工作表的单元格区域进行求和计算。 在 VBA 中调用工作表函数需要在工作表函数前加上 WorksheetFunction 属性。应用于 App","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/13.VBA_function","/project/Excel/13.VBA_function.md"]],
  ["v-28a84265","/project/Excel/14.VBA_fso.html",{"title":"VBA 之 文件操作","type":"article","readingTime":{"minutes":35.49,"words":10647},"excerpt":"170、导入文本文件 在实际应用中，我们经常从软件中将数据导出为文本文件，在需要将这些文本文件导入到 Excel 中时可以使用以下的方法。 1）使用查询表导入 代码解析： AddQuery 过程使用 QueryTable 对象的 Add 方法新建查询表后将文本文件“工资表.txt”的内容导入到工作表中。 应用于 QueryTable 对象的 Add 方法新建","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/14.VBA_fso","/project/Excel/14.VBA_fso.md"]],
  ["v-38e55367","/project/Excel/",{"title":"Excel 笔记介绍","type":"article","readingTime":{"minutes":0.71,"words":213},"excerpt":"Excel 是平时大家最长用的办公软件之一。Excel 是一个电子表格处理软件，可以用来制作电子表格，完成许多复杂的数据运算，进行数据的分析和预测，并且具有强大的制作图表的功能。 它的基本功能就不一一介绍了，长时不用，难免会忘了，于是，抽了些时间，把曾经的学习笔记整理一下，以便日后的翻越查找。 整理的笔记主要分为 3 块： 快捷键; 函数; VBA; 常用的","date":"2021-07-02T00:00:00.000Z","category":["笔记"],"tag":["Excel"]},["/project/Excel/index.html","/project/Excel/README.md"]],
  ["v-a5953228","/project/Git/01.Git_install.html",{"title":"Git安装","type":"article","readingTime":{"minutes":1.79,"words":536},"excerpt":"在使用Git前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac 和 Windows 平台上运行。 Git 各平台安装包下载地址为： Linux 平台安装 Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。 各 Linux 系统可以使用其安装包","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/01.Git_install","/project/Git/01.Git_install.md"]],
  ["v-eae27f6c","/project/Git/02.Git_config.html",{"title":"Git配置","type":"article","readingTime":{"minutes":2.38,"words":715},"excerpt":"Git 配置 Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。 这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方： /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/02.Git_config","/project/Git/02.Git_config.md"]],
  ["v-534392a8","/project/Git/03.Git_workfllow.html",{"title":"Git工作流程","type":"article","readingTime":{"minutes":0.36,"words":108},"excerpt":"Git 工作流程 一般工作流程如下： 克隆 Git 资源作为工作目录。; 在克隆的资源上添加或修改文件。; 如果其他人修改了，你可以更新资源。; 在提交前查看修改。; 提交修改。; 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。; 下图展示了 Git 的工作流程：","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/03.Git_workfllow","/project/Git/03.Git_workfllow.md"]],
  ["v-9a38186a","/project/Git/04.Git_work_stage_git.html",{"title":"Git工作区、暂存区和版本库","type":"article","readingTime":{"minutes":2.16,"words":647},"excerpt":"Git 工作区、暂存区和版本库 基本概念 我们先来理解下 Git 工作区、暂存区和版本库概念： 工作区：就是你在电脑里能看到的目录。; 暂存区：英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。; 版本库：工作区有一个隐藏目录 .git，这个不算工作区","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/04.Git_work_stage_git","/project/Git/04.Git_work_stage_git.md"]],
  ["v-27432dfc","/project/Git/05.Git_init_repo.html",{"title":"Git创建仓库","type":"article","readingTime":{"minutes":2.33,"words":700},"excerpt":"Git 创建仓库 本章节我们将为大家介绍如何创建一个 Git 仓库。 你可以使用一个已经存在的目录作为 Git 仓库。 git init Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。 在执行完成 git init 命令后，Git 仓库会","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/05.Git_init_repo","/project/Git/05.Git_init_repo.md"]],
  ["v-380e5280","/project/Git/06.Git_basic_opera.html",{"title":"Git基本操作","type":"article","readingTime":{"minutes":1.52,"words":457},"excerpt":"Git 基本操作 Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。 本节将对有关创建与提交你的项目快照的命令作介绍。 Git 常用的是以下 6 个命令：git clone、git push、git add、git commit、git checkout、git pull，后面我们会详细介绍。 说明 workspace：工作区; staging","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/06.Git_basic_opera","/project/Git/06.Git_basic_opera.md"]],
  ["v-6ef7e4ff","/project/Git/07.Git_branch_manage.html",{"title":"Git分支管理","type":"article","readingTime":{"minutes":4.69,"words":1408},"excerpt":"Git 分支管理 几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。 有人把 Git 的分支模型称为必杀技特性，而正是因为它，将 Git 从版本控制系统家族里区分出来。 创建分支命令： 切换分支命令: 当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/07.Git_branch_manage","/project/Git/07.Git_branch_manage.md"]],
  ["v-33cdb588","/project/Git/08.Git_log.html",{"title":"Git查看提交历史","type":"article","readingTime":{"minutes":2.59,"words":777},"excerpt":"Git 查看提交历史 Git 提交历史一般常用两个命令： git log：查看历史提交记录。; git blame ：以列表形式查看指定文件的历史修改记录。; git log 在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 git log 命令查看。 针对我们前一章节的操作，使用 git log 命令列出历史提交记录","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/08.Git_log","/project/Git/08.Git_log.md"]],
  ["v-22691845","/project/Git/09.Git_tag.html",{"title":"Git标签","type":"article","readingTime":{"minutes":1.44,"words":432},"excerpt":"Git 标签 如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。 比如说，我们想为我们的 runoob 项目发布一个\"1.0\"版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）\"v1.0\"的标签。 -a 选项意为\"创建一个带注解的标签\"。 不用 -a 选项也可以执行的，但","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/09.Git_tag","/project/Git/09.Git_tag.md"]],
  ["v-3175f3e3","/project/Git/10.Git_remote.html",{"title":"Git远程仓库（GitHub）","type":"article","readingTime":{"minutes":5.86,"words":1758},"excerpt":"Git 远程仓库（GitHub） 目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。 本例使用了 Github 作为远程仓库，你可以先阅读的 Github 简明教程。 添加远程库 要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/10.Git_remote","/project/Git/10.Git_remote.md"]],
  ["v-5f971df2","/project/Git/11.Git_server.html",{"title":"Git服务器搭建","type":"article","readingTime":{"minutes":1.28,"words":385},"excerpt":"Git 服务器搭建 前面我们远程仓库使用了 Github，Github 公开的项目是免费的，2019 年开始 Github 私有存储库也可以无限制使用。 这当然我们也可以自己搭建一台 Git 服务器作为私有仓库使用。 接下来我们将以 Centos 为例搭建 Git 服务器。 安装Git 接下来我们 创建一个git用户组和用户，用来运行git服务： 创建证书登","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/11.Git_server","/project/Git/11.Git_server.md"]],
  ["v-5909316c","/project/Git/",{"title":"Git介绍","type":"article","readingTime":{"minutes":4.1,"words":1229},"excerpt":"Git 是什么 Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 Git 与常用的版本控制工具 CVS，Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。 Git 不仅仅是个版本控制系统","date":"2021-05-12T00:00:00.000Z","category":["笔记"],"tag":["Git"]},["/project/Git/index.html","/project/Git/README.md"]],
  ["v-1bca8771","/project/Linux/Linux_basic/01.linux_atten.html",{"title":"linux的管理建议","type":"article","readingTime":{"minutes":12.86,"words":3857},"excerpt":"学习 Linux 的注意事项 对于初学者来说几个容易混淆的问题，便于让大家对 Linux 有一个初步了解。 Linux 严格区分大小写 Linux 是严格区分大小写的，这一点和 Windows 不一样，所以操作时要注意区分大小写的不同，包括文件名和目录名、命令、命令选项、配置文件设置选项等。 Linux 中所有内容以文件形式保存，包括硬件设备 Linux 中","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/01.linux_atten","/project/Linux/Linux_basic/01.linux_atten.md"]],
  ["v-937da3a6","/project/Linux/Linux_basic/02.linux_dir.html",{"title":"linux文件系统结构","type":"article","readingTime":{"minutes":16.08,"words":4823},"excerpt":"目录结构 学习 Linux，不仅限于学习各种命令，了解整个 Linux 文件系统的目录结构以及各个目录的功能同样至关重要。 使用 Linux 时，通过命令行输入 ls -l / 可以看到，在 Linux 根目录 / 下包含很多的子目录（称为一级目录），例如 bin、boot、usr 等。同时，各一级目录下还含有很多子目录（称为二级目录），比如 /usr/bi","date":"2021-05-05T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/02.linux_dir","/project/Linux/Linux_basic/02.linux_dir.md"]],
  ["v-1dd41dea","/project/Linux/Linux_basic/03.linux_basic.html",{"title":"linux基本操作命令","type":"article","readingTime":{"minutes":32.98,"words":9893},"excerpt":"命令的基本格式 命令提示符 登录系统后，第一眼看到的内容是： 这就是 Linux 系统的命令提示符。那么，这个提示符的含义是什么呢？ []：这是提示符的分隔符号，没有特殊含义。; root：显示的是当前的登录用户，笔者现在使用的是 root 用户登录。; @：分隔符号，没有特殊含义。; localhost：当前系统的简写主机名（完整主机名是 localhos","date":"2021-05-05T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/03.linux_basic","/project/Linux/Linux_basic/03.linux_basic.md"]],
  ["v-a8796496","/project/Linux/Linux_basic/04.linux_authority.html",{"title":"linux权限管理命令","type":"article","readingTime":{"minutes":17.94,"words":5381},"excerpt":"权限介绍 为什么需要权限 我们发现，初学者并不是不能理解权限命令，而是不能理解为什么需要设定不同的权限。所有的人都直接使用管理员身份，不可以吗？这是由于绝大多数用户使用的是个人计算机，而使用个人计算机的用户一般都是被信任的用户（如家人、朋友等）。在这种情况下，大家都可 以使用管理员身份直接登录。又因为管理员拥有最大权限，所以给我们带来了错觉，以为在计算机中不","date":"2021-05-07T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/04.linux_authority","/project/Linux/Linux_basic/04.linux_authority.md"]],
  ["v-3519facc","/project/Linux/Linux_basic/05.linux_help.html",{"title":"linux帮助命令","type":"article","readingTime":{"minutes":6.17,"words":1852},"excerpt":"man 命令 man 命令，是最常见的帮助命令，也是 Linux 最主要的帮助命令。 英文原意：an interface to the on-line reference manuals 命令格式如下： man 命令比较简单，我们举个例子： 这就是 man 命令的基本使用方法，非常简单。但是帮助命令的重点不是命令如何使用，而是帮助信息应该如何查询。这些信息较","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/05.linux_help","/project/Linux/Linux_basic/05.linux_help.md"]],
  ["v-2e4bb458","/project/Linux/Linux_basic/06.linux_search.html",{"title":"linux搜索命令","type":"article","readingTime":{"minutes":21.64,"words":6493},"excerpt":"Linux 拥有强大的搜索功能，但是强大带来的缺点是相对比较复杂。但是大家不用担心，搜索命令只是选项较多，不容易记忆而已，并不难理解。 在使用搜索命令的时候，大家还是需要注意，如果搜索的范围过大、搜索的内容过多，则会给系统造成巨大的压力，所以不要在服务器访问的高峰执行大范围的搜索命令。 whereis 命令 whereis 命令，用于搜索系统命令，也就是说，","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/06.linux_search","/project/Linux/Linux_basic/06.linux_search.md"]],
  ["v-67bc3d1b","/project/Linux/Linux_basic/07.linux_compress.html",{"title":"linux压缩、解压缩命令","type":"article","readingTime":{"minutes":13.41,"words":4024},"excerpt":"压缩文件介绍 在系统中，如果需要有大量的文件进行复制和保存，那么把它们打成压缩包是不错的选择。打包压缩作为常规操作，在 Windows 和 Linux 中都比较常见。Windows 中常见的压缩包格式主要有“.zip”、“.rar”和“.7z”等，但是你了解这些不同压缩格式的区别吗？其实，普通用户并不用理解这些压缩格式的算法有什么区别、压缩比有哪些不同，只要","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/07.linux_compress","/project/Linux/Linux_basic/07.linux_compress.md"]],
  ["v-12051066","/project/Linux/Linux_basic/08.linux_shutdown_reboot.html",{"title":"linux关机和重启命令","type":"article","readingTime":{"minutes":4.29,"words":1287},"excerpt":"说到关机和重启，很多人认为，重要的服务器（比如银行的服务器、电信的服务器）如果重启了，则会造成大范围的灾难。这里解释一下。 首先，就算是银行或电信的服务器，也不是不需要维护，而是依靠备份服务器来代替。其次，每个人的经验都是和自己的技术成长环境息息相关的。比如你是游戏运维出身， 而游戏又是数据为王，所以一切操作的目的就是保证数据的可靠和安全。这时，有计划的重启","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/08.linux_shutdown_reboot","/project/Linux/Linux_basic/08.linux_shutdown_reboot.md"]],
  ["v-1fdac436","/project/Linux/Linux_basic/09.linux_net.html",{"title":"linux常用网络命令","type":"article","readingTime":{"minutes":17.1,"words":5130},"excerpt":"我们在做练习的时候，需要让 Linux 进行联网配置。介绍一下如何给 Linux 配置 IP 地址，以及一些常用的网络命令。 配置 Linux 的 IP 地址 IP 地址是计算机在互联网中唯一的地址编码。每台计算机如果需要接入网络和其他计算机进行数据通信，就必须配置唯一的公网 IP 地址。 setup 命令配置网卡 Linux 当然也需要配置 IP 地址才可","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/09.linux_net","/project/Linux/Linux_basic/09.linux_net.md"]],
  ["v-a281b4fe","/project/Linux/Linux_basic/10.linux_text_edit.html",{"title":"linux文本编辑器","type":"article","readingTime":{"minutes":29.12,"words":8737},"excerpt":"文本编辑器 Vim Linux 中的所有内容以文件形式管理，在命令行下更改文件内容，常常会用到文本编辑器。 我们首选的文本编辑器是 Vim，它是一个基于文本界面的编辑工具，使用简单且功能强大，更重要的是，Vim 是所有 Linux 发行版本的默认文本编辑器。 很多 UNIX 和 Linux 的老用户习惯称呼它为 Vi，Vi 是 Vim 的早期版本，现在我们使","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/10.linux_text_edit","/project/Linux/Linux_basic/10.linux_text_edit.md"]],
  ["v-16a33b90","/project/Linux/Linux_basic/11.linux_soft_install.html",{"title":"linux软件安装","type":"article","readingTime":{"minutes":57.42,"words":17225},"excerpt":"计算机没有安装操作系统，就是一坨废铁，不能实现任何功能；如果计算机安装了换作系统，但没有应用软件，也只是中看不中用的花瓶。所以我们需要学习软件的安装，只有安装了所需的软件，才能实现想要的功能。比如，想要上网就需要安装浏览器，想要看小电影就需要安装视频播放器。 很多初学者会很困惑：Linux 中的软件安装方法是否和 Windows 中的软件安装方法一样呢？Wi","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/11.linux_soft_install","/project/Linux/Linux_basic/11.linux_soft_install.md"]],
  ["v-77605ea8","/project/Linux/Linux_basic/12.linux_user_group.html",{"title":"linux用户和用户组管理","type":"article","readingTime":{"minutes":49.11,"words":14733},"excerpt":"用户和用户组管理，顾名思义就是添加用户和用户组、更改密码和设定权限等操作。可能有很多人觉得用户管理没有意义，因为我们在使用个人计算机的时候，不管执行什么操作，都以管理员账户登录，而从来没有添加和使用过其他普通用户。这样做对个人计算机来讲问题不大，不过在服务器上是行不通的。大家想象一下，我们是一个管理团队，共同维护一组服务器，难道每个人都能够被赋子管理员权限吗","date":"2013-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/12.linux_user_group","/project/Linux/Linux_basic/12.linux_user_group.md"]],
  ["v-08ca65fe","/project/Linux/Linux_basic/13.linux_other_auth.html",{"title":"linux其他权限管理命令","type":"article","readingTime":{"minutes":24.46,"words":7337},"excerpt":"访问控制列表权限 ACL权限介绍 在普通权限中，用户对文件只有三种身份，就是属主、属组和其他人；每种用户身份拥有读（read)、写（write）和执行（execute）三种权限。但是在实际工作中，这三种身份实在是不够用，我们举个例子来看看。先看看示意图，如图14-1 所示。 图14-1\tACL 权限简介 上图的根目录中有一个 /project 目录，这是班级","date":"2021-05-05T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/13.linux_other_auth","/project/Linux/Linux_basic/13.linux_other_auth.md"]],
  ["v-20053300","/project/Linux/Linux_basic/14.linux_filesystem_manage.html",{"title":"linux文件系统管理","type":"article","readingTime":{"minutes":65.96,"words":19787},"excerpt":"文件系统这个名词大家都很陌生，不过如果说成分区，大家就比较容易理解了。原先每个分区只能格式化为一个文件系统，所以我们可以认为文件系统就是指分区。不过随着技术的进步，现在一个文件系统可以由几个分区组成，或者一个分区可以格式化为几个不同的文件系统，所以我们已经不能把文件系统和分区等同对待了。不过，为了便于理解，大家可以把文件系统想象成分区。下面会介绍硬盘的基本结","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/14.linux_filesystem_manage","/project/Linux/Linux_basic/14.linux_filesystem_manage.md"]],
  ["v-1bc6b556","/project/Linux/Linux_basic/",{"title":"linux介绍","type":"article","readingTime":{"minutes":23.37,"words":7012},"excerpt":"什么是操作系统 要讲明白 Linux 是什么，首先得说说什么是操作系统。计算机系统是指按用户的要求，接收和存储信息、自动进行数据处理并输出结果信息的系统，它由硬件子系统（计算机系统赖以工作的实体，包括显示屏、键盘、鼠标、硬盘等）和软件子系统（保证计算机系统按用户指定的要求协调工作，如 Windows 操作系统、Office 办公 软件等）组成。 而操作系统（","date":"2021-05-06T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_basic/index.html","/project/Linux/Linux_basic/README.md"]],
  ["v-400824e4","/project/Linux/Linux_manage/01.linux_boot.html",{"title":"linux系统启动管理","type":"article","readingTime":{"minutes":53.05,"words":15914},"excerpt":"Linux 系统的启动是不需要人为参与和控制的，只要按下电源，系统就会按照设定好的方式进行启动。不过，了解系统的启动有助于我们在系统出现问题时能够快速地修复 Linux 系统。 在 CentOS 6.x 中，系统的启动过程和以前的系统相比变化较大，CentOS 6.x 系统使用 Upstart 启动服务取代了原先的 System V init 启动服务。Up","date":"2021-06-01T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_manage/01.linux_boot","/project/Linux/Linux_manage/01.linux_boot.md"]],
  ["v-4412a674","/project/Linux/Linux_manage/02.linux_service.html",{"title":"linux系统服务管理","type":"article","readingTime":{"minutes":43.35,"words":13006},"excerpt":"什么是系统服务？服务是在后台运行的应用程序，并且可以提供一些本地系统或网络的功能。 那么，Linux 中常见的服务有那些，这些服务怎么分类，服务如何启动，服务如何自启动，服务如何查看？ 其实服务管理并不难，但是 Linux 中服务的分类比较多，而且每种服务又有多种启动和自启动方法，所以容易混淆。同时，常见网络服务的端口号也是必须掌握的基础知识。 服务的简介与","date":"2021-06-01T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_manage/02.linux_service","/project/Linux/Linux_manage/02.linux_service.md"]],
  ["v-26f2efab","/project/Linux/Linux_manage/03.linux_process.html",{"title":"linux系统进程管理","type":"article","readingTime":{"minutes":46.07,"words":13822},"excerpt":"很多人一看要学习系统管理了，策一感觉就是\"虽然不知道你在说什么，但是看起来很高端\"。 其实，系统管理只是一个统称，软件管理、文件系统管理、启动管理和服务管理都可以归入系统管理当中。 这次，我们主要学习进程管理、工作管理和系统定时任务。同时解决一些问题，如什么是进程、进程的管理方式是什么、工作管理的作用是什么、系统定时任务如何实现。 进程的简介 无论是 Lin","date":"2021-06-01T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_manage/03.linux_process","/project/Linux/Linux_manage/03.linux_process.md"]],
  ["v-2a0c23b0","/project/Linux/Linux_manage/04.linux_work.html",{"title":"linux系统工作管理","type":"article","readingTime":{"minutes":47.15,"words":14145},"excerpt":"工作管理简介 工作管理指的是在单个登录终端（也就是登录的 Shell 界面）同时管理多个工作的行为。也就是说，我们登陆了一个终端，已经在执行一个操作，那么是否可以在不关闭当前操作的情况下执行其他操作呢？ 当然可以，我们可以再启动一个终端，然后执行其他的操作。不过，是否可以在一个终端执行不同的操作呢？这就需要通过工作管理来实现了。 例如，我在当前终端正在 vi","date":"2021-06-01T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_manage/04.linux_work","/project/Linux/Linux_manage/04.linux_work.md"]],
  ["v-4f5c0798","/project/Linux/Linux_manage/05.linux_log.html",{"title":"linux系统日志管理","type":"article","readingTime":{"minutes":38.5,"words":11551},"excerpt":"系统日志详细地记录了在什么时间，哪台服务器、哪个程序或服务出现了什么情况。不管是哪种操作系统，都详细地记录了重要程序和服务的日志，只是我们很少养成查看日志的习惯。 日志是系统信息最详细、最准确的记录者，如果大家能够善用日志，那么当系统出现问题时，我们就能在第一时间发现问题，也能够从日志中找到解决问题的方法。 很多人都觉得查看日志比较枯燥，甚至干脆看不懂，那么","date":"2021-06-01T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_manage/05.linux_log","/project/Linux/Linux_manage/05.linux_log.md"]],
  ["v-03b998e2","/project/Linux/Linux_manage/06.LAMP_LNMP_evn.html",{"title":"LAMP和LNMP环境搭建","type":"article","readingTime":{"minutes":48.7,"words":14609},"excerpt":"LAMP 环境搭建指的是在 Linux 操作系统中分别安装 Apache 网页服务器、MySQL 数据库服务器和 PHP 开发服务器，以及一些对应的扩展软件。 LAMP 环境是当前极为流行的搭建动态网站的开源软件系统，拥有良好的稳定性及兼容性。而且随着开源软件的蓬勃发展，越来越多的企业和个人选择在 LAMP 开发平台上搭建自己的网站。 LNMP 环境搭建指的","date":"2021-06-01T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_manage/06.LAMP_LNMP_evn","/project/Linux/Linux_manage/06.LAMP_LNMP_evn.md"]],
  ["v-42e46555","/project/Linux/Linux_manage/07.linux_backup_recover.html",{"title":"linux数据备份与恢复","type":"article","readingTime":{"minutes":28.22,"words":8466},"excerpt":"不知道大家有没有丢失过重要的数据呢？ 丢失数据的理由是多种多样的，有人是因为重装系统时，没有把加密文件的密钥导出，重装系统后密钥丢失，导致所有的加密数据不能解密；也有人是因为在火车上笔记本电脑被别人调包，从而导致硬盘中的重要数据丢失；还有人是因为在系统中误执行了 rm -rf 命令，导致整个根目录被人为清空。但由此带来的后果是一样严重的。 保护重要数据的最有","date":"2021-06-01T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_manage/07.linux_backup_recover","/project/Linux/Linux_manage/07.linux_backup_recover.md"]],
  ["v-09bc6b68","/project/Linux/Linux_manage/08.SELinux.html",{"title":"SELinux管理","type":"article","readingTime":{"minutes":39.85,"words":11954},"excerpt":"root 用户实在是一个超人，它在 Linux 系统当中就是无所不能的，而且读、写和执行权限对 root 用户完全没有作用。root 用户的存在极大地方便了 Linux 的管理，但是也造成了一定的安全隐患。 大家想象一下，如果 root 用户被盗用了，或者 root 用户本身对 Linux 并不熟悉，在管理 Linux 的过程中产生了误操作，则会造成什么样的","date":"2021-06-01T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_manage/08.SELinux","/project/Linux/Linux_manage/08.SELinux.md"]],
  ["v-baab0316","/project/Linux/Linux_manage/",{"title":"linux高级文件系统管理","type":"article","readingTime":{"minutes":57.41,"words":17222},"excerpt":"磁盘配额 什么是磁盘配额 磁盘配额（Quota）就是 Linux 系统中用来限制特定的普通用户或用户组在指定的分区上占用的磁盘空间或文件个数的。 在此概念中，有以下几个重点需要注意： 1. 磁盘配额限制的用户和用户组，只能是普通用户和用户组，也就是说超级用户 root 是不能做磁盘配额的； 2. 磁盘配额限制只能针对分区，而不能针对某个目录，换句话说，磁盘配","date":"2021-06-01T00:00:00.000Z","category":["笔记"],"tag":["linux"]},["/project/Linux/Linux_manage/index.html","/project/Linux/Linux_manage/README.md"]],
  ["v-2659ab4d","/project/Linux/Linux_mix/Linux_sed_grep_awk.html",{"title":"linux三剑客","type":"article","readingTime":{"minutes":42.27,"words":12682},"excerpt":"grep 命令 很多时候，我们并不需要列出文件的全部内容，而是从文件中找到包含指定信息的那些行，要实现这个目的，可以使用 grep 命令。 grep 命令作为 Linux 文本处理三剑客的一员，另外两个是 sed 和 awk。 grep 命令的由来可以追溯到 UNIX 诞生的早期，在 UNIX 系统中，搜索的模式（patterns）被称为正则表达式（regu","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["linux"]},["/project/Linux/Linux_mix/Linux_sed_grep_awk","/project/Linux/Linux_mix/Linux_sed_grep_awk.md"]],
  ["v-04d80a28","/project/Linux/Linux_mix/",{"title":"linux大杂烩","type":"article","readingTime":{"minutes":0.3,"words":89},"excerpt":"大杂烩 所谓的 Linux 大杂烩，就是系统学习的知识之外，平时使用 Linux 时，遇到的一些问题的解决方法、或常规的经验总结。把这些非系统的知识总结起来，当然，这些内容很零散的汇集到此处，某些内容之间可能会有些许联系。","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["linux"]},["/project/Linux/Linux_mix/index.html","/project/Linux/Linux_mix/README.md"]],
  ["v-51d217c0","/project/Linux/Shell/01.Shell_intro.html",{"title":"Shell脚本介绍","type":"article","readingTime":{"minutes":1.44,"words":433},"excerpt":"什么是 Shell shell 是一个程序，采用 C 语言编写，是用户和 linux 内核沟通的桥梁。它既是一种命令语言，又是一种解释性的编程语言。通过一个图来查看一下 shell 的作用。 Kernel：为软件服务，接收用户或软件指令驱动硬件，完成工作；; shell：命令解释器；; user：用户接口，对接用户。; 上图可以看出，shell 在操作系统中","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/01.Shell_intro","/project/Linux/Shell/01.Shell_intro.md"]],
  ["v-12025104","/project/Linux/Shell/02.Shell_grammar.html",{"title":"Shell语法","type":"article","readingTime":{"minutes":3.66,"words":1097},"excerpt":"shell 脚本就是将完成一个任务的所有命令按照执行的先后顺序，自上而下写入到一个文本文件中，然后给予执行权限。 如何书写一个 shell 脚本 shell 脚本命名： 名字要有意义，最好不要用 a、b、c、d、1、2、3、4 这种方式命名；虽然 linux 系统中，文件没有扩展名的概念，依然建议用 .sh 结尾；名字不要太长，最好能在 30 个字节以内解决","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/02.Shell_grammar","/project/Linux/Shell/02.Shell_grammar.md"]],
  ["v-0f0e7622","/project/Linux/Shell/03.Shell_format_out.html",{"title":"Shell格式化输出","type":"article","readingTime":{"minutes":2.81,"words":843},"excerpt":"一个程序需要有 0 个或以上输入，1 个或以上输出。 echo 命令介绍 功能：将内容输出到默认显示设备。 echo 命令的功能是在显示器上显示一段文件，一般起到一个提示的作用。 命令格式如下： 补充说明：echo会将输入的字符串送往标准输出。输出的字符串以空白字符隔开，并在最后加上换行号。 举例说明：输出一个菜单 执行脚本输出如下： 颜色代码 脚本中 ec","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/03.Shell_format_out","/project/Linux/Shell/03.Shell_format_out.md"]],
  ["v-e700fa88","/project/Linux/Shell/04.Shell_format_in.html",{"title":"Shell格式化输入","type":"article","readingTime":{"minutes":1,"words":300},"excerpt":"read 命令 默认接收键盘的输入，回车符代表输入结束。 命令格式如下： 实例 1. 模拟系统登陆 2. 利用管道读取文件内容 每次调用 read 命令都会读取文件中的 \"一行\" 文本（文本文件的每一行结尾都有一个回车符）。当文件没有可读的行时（即没有回车符时），read 命令将以非零状态退出。 通过什么样的方法将文件中的数据传给 read 呢？使用 cat","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/04.Shell_format_in","/project/Linux/Shell/04.Shell_format_in.md"]],
  ["v-3f3bc421","/project/Linux/Shell/05.Shell_var.html",{"title":"Shell变量","type":"article","readingTime":{"minutes":4.1,"words":1230},"excerpt":"变量介绍 在编程中，我们总有一些数据需要临时存放在内存，以待后续使用时快速读出。内存在系统启动的时候被按照1B一个单位划分若干个块，然后统一编号（16 进制编号），并对内存的使用情况做记录，保存在内存跟踪表中。 那么问题来了，1G 内存有多少个 1B 单位呢？ \" 计算机的存储容量单位：\" \" 1B = 8bit\" \" 1KB = 1024B\" \" 1MB ","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/05.Shell_var","/project/Linux/Shell/05.Shell_var.md"]],
  ["v-d5143ae4","/project/Linux/Shell/06.Shell_array.html",{"title":"Shell数组","type":"article","readingTime":{"minutes":2.75,"words":825},"excerpt":"数组介绍 一个变量只能存一个值，但是现实中又有很多值需要存储，那么变量就有些拘谨了。比如做一个学员信息表，一个班 50 个人，每个人 6 条信息，我们需要定义 300 个变量才能完成。恐怖恐怖，这只是一个班的学生，如果一个学校呢？一个市呢？......我想静静了！ 基本数组 数组可以让用户一次赋予多个值，需要读取数据时只需要通过索引调用就可以方便读出了。 数","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/06.Shell_array","/project/Linux/Shell/06.Shell_array.md"]],
  ["v-5ff9e842","/project/Linux/Shell/07.Shell_operation.html",{"title":"Shell运算","type":"article","readingTime":{"minutes":1.26,"words":378},"excerpt":"Shell 中的运算 数学比较运算 表达式 说明 ------ -------- -eq 等于 -gt 大于 -lt 小于 -ge 大于等于 -le 小于等于 -ne 不等于 字符串比较运算 注意字符串一定别忘了使用引号引起来 表达式 说明 ------ -------------------------- == 等于 != 不等于 -n 检查字符串的长度是","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/07.Shell_operation","/project/Linux/Shell/07.Shell_operation.md"]],
  ["v-f44f96a0","/project/Linux/Shell/08.Shell_if.html",{"title":"Shell流程控制---if判断语句","type":"article","readingTime":{"minutes":2.4,"words":721},"excerpt":"当我们在写程序的时候，时常对上一步执行是否成功如何判断苦恼，当我们学习了if判断语句就可以解决你的苦恼。if判断语句在我们程序中就是用来做判断的，以后不管学习什么语言，以后只要涉及到判断的部分，就可以直接拿if来使用，不同的语言之间的 if 只是语法不同，原理是相同的。 if 语法 语法一 if---then 语句 适用范围：只需要一步判断，条件为真做什么。","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/08.Shell_if","/project/Linux/Shell/08.Shell_if.md"]],
  ["v-2c07ab3b","/project/Linux/Shell/09.Shell_for.html",{"title":"Shell流程控制---for循环语句","type":"article","readingTime":{"minutes":2.7,"words":810},"excerpt":"脚本再执行任务的时候，总会遇到需要循环执行的时候，比如说我们需要脚本每隔五分钟执行一次 ping 的操作，除了计划任务，我们还可以使用脚本来完成，那么我们就用到了循环语句。 for 循环介绍 很多人把for循环叫做条件循环，或者 for-i-in。其实前者说的就是 for 的特性，for 循环的次数和给予的条件是成正比的，你让它循环 5 次，它就循环 5 次","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/09.Shell_for","/project/Linux/Shell/09.Shell_for.md"]],
  ["v-783165bd","/project/Linux/Shell/10.Shell_while.html",{"title":"Shell流程控制---while循环语句","type":"article","readingTime":{"minutes":2.23,"words":669},"excerpt":"while 循环介绍 while 在 shell 中也是负责循环的语句，和 for 一样。因为功能一样，很多人在学习和工作中的脚本遇到循环，到底该使用 for 还是 while 呢？很多人不知道，就造就了有人一遇到循环就是 for 或者一味的 while。我觉得可以按照循环次数的情况来使用，如果已经知道循环次数，那么就建议使用 for，比如说一天需要循环 2","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/10.Shell_while","/project/Linux/Shell/10.Shell_while.md"]],
  ["v-9c91b062","/project/Linux/Shell/11.Shell_until.html",{"title":"Shell流程控制---until循环语句","type":"article","readingTime":{"minutes":0.57,"words":170},"excerpt":"until 介绍 和 while 正好相反，until 是条件为假开始执行循环，条件为真停止循环。 until 语法 具体用法可以参照 while 循环，此处不多说明。 案例 输出 10-20 数字 while 和 until 接力输出","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/11.Shell_until","/project/Linux/Shell/11.Shell_until.md"]],
  ["v-0946e396","/project/Linux/Shell/12.Shell_case.html",{"title":"Shell流程控制---case分支语句","type":"article","readingTime":{"minutes":2.29,"words":686},"excerpt":"case 介绍 在生产环境中，我们总会遇到一个问题需要根据不同的状况来执行不同的预案，那么我们要处理这样的问题，首先根据可能出现的情况先写出对应预案，之后根据出现的情况来加载不同的预案。 特点：根据给予的不同条件执行不同的代码块。 \" 比如你去相亲，遇到对方家人要怎样称呼\" \"\" \" 看到对方父亲：伯父好\" \"\" \" 看到对方母亲：伯母好\" \"\" \" 看到对","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/12.Shell_case","/project/Linux/Shell/12.Shell_case.md"]],
  ["v-06ec4aef","/project/Linux/Shell/13.Shell_function.html",{"title":"Shell函数","type":"article","readingTime":{"minutes":1.15,"words":344},"excerpt":"函数介绍 写代码的时候，我们很多人习惯从头写到结束，完成以后再一起测试。但是到测试阶段才发现：错误一大堆，上帝啊！弄死我吧！ 为了解决这个问题，建议大家把代码模块化，一个模块实现一个功能，哪怕是一个很小的功能都可以，这样的话我们写代码，逻辑上就会比较简单，代码量比较少，排错简单，这也就是函数的好处。 函数的优点 代码模块化，调用方便，节省内存 代码模块化，代","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/13.Shell_function","/project/Linux/Shell/13.Shell_function.md"]],
  ["v-b2422724","/project/Linux/Shell/14.Shell_regular.html",{"title":"Shell正则表达式","type":"article","readingTime":{"minutes":3.46,"words":1038},"excerpt":"正则表达式介绍 正则表达式是一种文本模式匹配，包括普通字符（例如：a到z之间的字母）和特殊字符（称为”元字符“）。它是一种字符串匹配的模式，可以用来检查一个字符串是否含有某子字串、将匹配的子串替换或者从某个字符串中取出某个条件的子串。 正则表达式就像数学公式一样，我们可以通过正则表达式提供的一些特殊字符来生成一个匹配对应字符串的公式，用此来从海量数据中匹配出","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/14.Shell_regular","/project/Linux/Shell/14.Shell_regular.md"]],
  ["v-607845b3","/project/Linux/Shell/15.Shell_grep.html",{"title":"Shell对文本的搜索---grep命令","type":"article","readingTime":{"minutes":4.81,"words":1442},"excerpt":"介绍 grep 是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。这也是一个我们比较常用的命令之一，好多时候虽然没通过系统的学习，但是我们还是会经常用到。当文本为标准输入时，经常和管道符 | 结合使用。 grep 命令 命令格式如下： 来自文件; 来自标准输入; 当 grep 的输入既来自文件也来自标准输入时，grep 将忽略标准输","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/15.Shell_grep","/project/Linux/Shell/15.Shell_grep.md"]],
  ["v-14ede494","/project/Linux/Shell/16.Shell_sed.html",{"title":"Shell对文件的操作---sed命令","type":"article","readingTime":{"minutes":7.16,"words":2147},"excerpt":"介绍 在 shell 脚本编写中，时常会用到对文件的相关操作，比如增加内容、修改内容、删除部分内容、查看部分内容等，但是上述的这些操作一般都是需要在文本编辑器中才能操作，常用的文本编辑器有：gedit、vim、nano 等，又是交互式文本编辑器，脚本无法自己独立完成必须有人参与才可以完成。如果这样的话又违背了我们编写脚本的目的（全部由机器来完成，减少人的工作","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/16.Shell_sed","/project/Linux/Shell/16.Shell_sed.md"]],
  ["v-4d67dad2","/project/Linux/Shell/17.Shell_awk.html",{"title":"Shell对输出流的处理---awk命令","type":"article","readingTime":{"minutes":8.23,"words":2469},"excerpt":"在日常计算机管理中，总会有很多数据输出到屏幕或者文件，这些输出包含了标准输出、标准错误输出。默认情况下，这些信息全部输出到默认输出设备---屏幕。然而，大量的数据输出中，只有一小部分是我们需要重点关注的，把我们需要的或关注的这些信息，过滤或者提取，以备后续需要是调用。早先的学习中，我们学过使用 grep 来过滤这些数据，使用 cut、tr 命令提取某些字段，","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/17.Shell_awk","/project/Linux/Shell/17.Shell_awk.md"]],
  ["v-55fadbbc","/project/Linux/Shell/18.Shell_monitor_script.html",{"title":"Shell监控脚本","type":"article","readingTime":{"minutes":4.39,"words":1316},"excerpt":"脚本目的 监控一个机器的存活状态; 监控一个端口的开启状态; 监控内存使用率脚本; 找出使用 CPU 或 memory 前十的进程; 监控硬盘 IO 脚本; 试写脚本 下面的几个脚本实例中，脚本的开头信息省略，大致内容如下： 脚本如何写，需要一个思路框架，比如： \" 需要用什么命令，命令的具体用法；\" \"\" \" 需要循环时如何去循环，匹配时如何去匹配；\" \"","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/18.Shell_monitor_script","/project/Linux/Shell/18.Shell_monitor_script.md"]],
  ["v-310694ef","/project/Linux/Shell/19.Shell_lamp_install_script.html",{"title":"Shell脚本---lamp环境安装","type":"article","readingTime":{"minutes":5.97,"words":1792},"excerpt":"lamp 环境安装 思路： lamp 安装; apache（apr 及其相关包）; mysql（mysql 的配置，安装时调用配置）; php（php 相关包）; 代码：","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/19.Shell_lamp_install_script","/project/Linux/Shell/19.Shell_lamp_install_script.md"]],
  ["v-4e0b9d2e","/project/Linux/Shell/",{"title":"Shell脚本笔记","type":"article","readingTime":{"minutes":0.72,"words":215},"excerpt":"Shell 脚本 日常运维工作大部分是一些繁琐的重复的工作，每天 80% 的工作就是重复昨天的事情，而且工作量还比较大，那么摆在运维面前的选择就是： 自己搞定一切; 让机器搞定一切; 当然，谁不愿意喝着茶水，逗着前台妹子过完愉快的一天呢！如何让机器搞定一切，得以解放自己，就是我们要学习的内容。Shell 脚本是入门最快、最高效的一个脚本语言。 学习 shel","date":"2021-04-09T00:00:00.000Z","category":["教程"],"tag":["shell"]},["/project/Linux/Shell/index.html","/project/Linux/Shell/README.md"]],
  ["v-3706649a","/404.html",{"title":"","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/404"]],
  ["v-5bc93818","/category/",{"title":"分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/index.html"]],
  ["v-744d024e","/tag/",{"title":"标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"title":"文章","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/article/index.html"]],
  ["v-75ed4ea4","/encrypted/",{"title":"加密","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/encrypted/index.html"]],
  ["v-2897d318","/slides/",{"title":"幻灯片","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/slides/index.html"]],
  ["v-154dc4c4","/star/",{"title":"收藏","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/star/index.html"]],
  ["v-01560935","/timeline/",{"title":"时间轴","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/timeline/index.html"]],
  ["v-7faacc98","/category/it%E5%9F%BA%E7%A1%80/",{"title":"IT基础 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/it基础/","/category/it%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-60f135eb","/tag/it%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",{"title":"IT基础知识 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/it基础知识/","/tag/it%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index.html"]],
  ["v-1dd061d4","/category/%E5%88%B7%E6%9C%BA/",{"title":"刷机 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/刷机/","/category/%E5%88%B7%E6%9C%BA/index.html"]],
  ["v-b310d42a","/tag/git/",{"title":"Git 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/git/index.html"]],
  ["v-4f7bdea5","/category/%E6%8A%98%E8%85%BE/",{"title":"折腾 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/折腾/","/category/%E6%8A%98%E8%85%BE/index.html"]],
  ["v-5759d5d4","/tag/%E8%B7%AF%E7%94%B1%E5%99%A8/",{"title":"路由器 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/路由器/","/tag/%E8%B7%AF%E7%94%B1%E5%99%A8/index.html"]],
  ["v-3d185fb3","/category/q5/",{"title":"Q5 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/q5/index.html"]],
  ["v-3de006f8","/tag/msg1500/",{"title":"MSG1500 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/msg1500/index.html"]],
  ["v-765c3fdf","/category/%E5%B0%8F%E5%A8%B1/",{"title":"小娱 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/小娱/","/category/%E5%B0%8F%E5%A8%B1/index.html"]],
  ["v-653d5496","/tag/%E6%96%90%E8%AE%AFn1/",{"title":"斐讯N1 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/斐讯n1/","/tag/%E6%96%90%E8%AE%AFn1/index.html"]],
  ["v-0e8f0af3","/category/%E7%9F%BF%E6%B8%A3/",{"title":"矿渣 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/矿渣/","/category/%E7%9F%BF%E6%B8%A3/index.html"]],
  ["v-79630caf","/tag/%E6%8A%98%E8%85%BE/",{"title":"折腾 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/折腾/","/tag/%E6%8A%98%E8%85%BE/index.html"]],
  ["v-437763b8","/category/openwrt/",{"title":"Openwrt 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/openwrt/index.html"]],
  ["v-387638fd","/tag/%E7%9F%BF%E6%B8%A3/",{"title":"矿渣 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/矿渣/","/tag/%E7%9F%BF%E6%B8%A3/index.html"]],
  ["v-3dad9369","/category/%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/",{"title":"系统文件 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/系统文件/","/category/%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/index.html"]],
  ["v-0da0d5fe","/tag/n1/",{"title":"N1 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/n1/index.html"]],
  ["v-43d7543a","/category/vuepress/",{"title":"Vuepress 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/vuepress/index.html"]],
  ["v-e20a2624","/tag/%E8%A7%A3%E5%8C%85/",{"title":"解包 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/解包/","/tag/%E8%A7%A3%E5%8C%85/index.html"]],
  ["v-5e41dbce","/category/%E7%BD%91%E7%AB%99/",{"title":"网站 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/网站/","/category/%E7%BD%91%E7%AB%99/index.html"]],
  ["v-6f0097ee","/tag/openwrt/",{"title":"openwrt 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/openwrt/index.html"]],
  ["v-52a9f9b2","/category/%E5%AD%A6%E4%B9%A0/",{"title":"学习 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/学习/","/category/%E5%AD%A6%E4%B9%A0/index.html"]],
  ["v-8a10e630","/tag/padavan/",{"title":"padavan 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/padavan/index.html"]],
  ["v-49425445","/category/%E7%AC%94%E8%AE%B0/",{"title":"笔记 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/笔记/","/category/%E7%AC%94%E8%AE%B0/index.html"]],
  ["v-2836033f","/tag/blog/",{"title":"blog 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/blog/index.html"]],
  ["v-4f7b1987","/category/%E6%95%99%E7%A8%8B/",{"title":"教程 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/教程/","/category/%E6%95%99%E7%A8%8B/index.html"]],
  ["v-28c18de7","/tag/link/",{"title":"link 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/link/index.html"]],
  ["v-484552dc","/tag/markdown/",{"title":"Markdown 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/markdown/index.html"]],
  ["v-6106c001","/tag/docker/",{"title":"docker 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/docker/index.html"]],
  ["v-3766d7b4","/tag/excel/",{"title":"Excel 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/excel/index.html"]],
  ["v-211f44ee","/tag/linux/",{"title":"linux 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/linux/index.html"]],
  ["v-09601066","/tag/shell/",{"title":"shell 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/shell/index.html"]],
]

export const pagesRoutes = routeItems.reduce(
  (result, [name, path, meta, redirects]) => {
    result.push(
      {
        name,
        path,
        component: Vuepress,
        meta,
      },
      ...redirects.map((item) => ({
        path: item,
        redirect: path,
      }))
    )
    return result
  },
  [
    {
      name: "404",
      path: "/:catchAll(.*)",
      component: Vuepress,
    }
  ]
)
